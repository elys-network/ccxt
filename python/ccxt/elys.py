# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.abstract.elys import ImplicitAPI
import math
from ccxt.base.types import Any, Balances, Currencies, Int, Market, Order, Strings, Ticker, Tickers, FundingRate, OpenInterest, FundingRates, Trade
from typing import List
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.decimal_to_precision import TICK_SIZE


class elys(Exchange, ImplicitAPI):

    def describe(self) -> Any:
        return self.deep_extend(super(elys, self).describe(), {
            'id': 'elys',
            'name': 'Elys Network',
            'countries': ['US'],  # United States
            'version': 'v1',
            'rateLimit': 100,  # 10 requests per second
            'certified': False,
            'pro': False,
            'dex': True,
            'has': {
                'CORS': None,
                'spot': True,
                'margin': False,
                'swap': True,
                'future': True,
                'option': False,
                'addMargin': False,
                'borrowCrossMargin': False,
                'borrowIsolatedMargin': False,
                'cancelAllOrders': False,
                'cancelAllOrdersAfter': False,
                'cancelOrder': False,
                'cancelOrders': False,
                'cancelOrdersForSymbols': False,
                'closeAllPositions': False,
                'closePosition': False,
                'createMarketBuyOrderWithCost': False,
                'createMarketOrderWithCost': False,
                'createMarketSellOrderWithCost': False,
                'createOrder': False,
                'createOrders': False,
                'createOrderWithTakeProfitAndStopLoss': False,
                'createReduceOnlyOrder': False,
                'createStopOrder': False,
                'createTriggerOrder': False,
                'editOrder': False,
                'editOrders': False,
                'fetchAccounts': False,
                'fetchBalance': True,
                'fetchBorrowInterest': False,
                'fetchBorrowRateHistories': False,
                'fetchBorrowRateHistory': False,
                'fetchCanceledAndClosedOrders': False,
                'fetchCanceledOrders': False,
                'fetchClosedOrders': False,
                'fetchCrossBorrowRate': False,
                'fetchCrossBorrowRates': False,
                'fetchCurrencies': True,
                'fetchDepositAddress': False,
                'fetchDepositAddresses': False,
                'fetchDeposits': False,
                'fetchDepositWithdrawFee': False,
                'fetchDepositWithdrawFees': False,
                'fetchFundingHistory': False,
                'fetchFundingRate': False,
                'fetchFundingRateHistory': False,
                'fetchFundingRates': True,
                'fetchIndexOHLCV': False,
                'fetchIsolatedBorrowRate': False,
                'fetchIsolatedBorrowRates': False,
                'fetchLedger': False,
                'fetchLeverage': False,
                'fetchLeverageTiers': False,
                'fetchLiquidations': False,
                'fetchMarginMode': None,
                'fetchMarketLeverageTiers': False,
                'fetchMarkets': True,
                'fetchMarkOHLCV': False,
                'fetchMyLiquidations': False,
                'fetchMyTrades': True,
                'fetchOHLCV': True,
                'fetchOpenInterest': True,
                'fetchOpenInterestHistory': False,
                'fetchOpenInterests': False,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': False,
                'fetchOrders': True,
                'fetchOrderTrades': False,
                'fetchPosition': False,
                'fetchPositionMode': False,
                'fetchPositions': False,
                'fetchPositionsRisk': False,
                'fetchPremiumIndexOHLCV': False,
                'fetchTicker': 'emulated',
                'fetchTickers': True,
                'fetchTime': False,
                'fetchTrades': True,
                'fetchTradingFee': False,
                'fetchTradingFees': False,
                'fetchTransfer': False,
                'fetchTransfers': False,
                'fetchWithdrawals': False,
                'repayCrossMargin': False,
                'repayIsolatedMargin': False,
                'setLeverage': False,
                'setMarginMode': False,
                'setPositionMode': False,
                'signIn': False,
                'transfer': False,
                'withdraw': False,
            },
            'timeframes': {
                '1m': '1',
                '1h': '60',
                '1d': '1D',
            },
            'urls': {
                'logo': 'https://elys.network/logo.png',
                'api': {
                    'public': 'https://testnet-elys-ccxt-service-j5trp.ondigitalocean.app',
                    'private': 'https://testnet-elys-ccxt-service-j5trp.ondigitalocean.app',
                },
                'test': {
                    'public': 'https://testnet-elys-ccxt-service-j5trp.ondigitalocean.app',
                    'private': 'https://testnet-elys-ccxt-service-j5trp.ondigitalocean.app',
                },
                'www': 'https://elys.network',
                'doc': [
                    'https://docs.elys.network',
                ],
                'fees': [
                    'https://docs.elys.network/developers/fees',
                ],
            },
            'api': {
                'public': {
                    'get': {
                        'v1/currencies': 1,
                        'v1/markets': 1,
                        'v1/tickers': 1,
                        'v1/funding-rates': 1,
                        'v1/orders/open': 1,
                        'v1/orders': 1,
                        'v1/order': 1,
                        'v1/open-interest': 1,
                        'trades/{address}/{symbol}/{size}/{from}': 1,
                    },
                },
            },
            'fees': {
                'trading': {
                    'feeSide': 'get',
                    'tierBased': False,
                    'percentage': True,
                    'taker': self.parse_number('0.001'),  # 0.1%
                    'maker': self.parse_number('0.001'),  # 0.1%
                },
            },
            'precisionMode': TICK_SIZE,
            'exceptions': {
                'exact': {},
                'broad': {},
            },
            'options': {
                'sandboxMode': False,
                'defaultType': 'swap',  # 'spot', 'swap'
                'defaultSubType': 'linear',  # 'linear', 'inverse'
            },
            'commonCurrencies': {},
        })

    def set_sandbox_mode(self, enabled):
        super(elys, self).set_sandbox_mode(enabled)
        self.options['sandboxMode'] = enabled

    def fetch_currencies(self, params={}) -> Currencies:
        """
        fetches all available currencies on an exchange
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an associative dictionary of currencies
        """
        url = self.urls['api']['public'] + '/v1/currencies'
        response = self.fetch(url, 'GET', None, None)
        #
        # [
        #     {
        #         "decimals": 6,
        #         "denom": "USDC"
        #     },
        #     {
        #         "decimals": 8,
        #         "denom": "WBTC"
        #     }
        # ]
        #
        result: dict = {}
        for i in range(0, len(response)):
            currency = response[i]
            id = self.safe_string(currency, 'denom')
            code = self.safe_currency_code(id)
            decimals = self.safe_integer(currency, 'decimals')
            result[code] = self.safe_currency_structure({
                'id': id,
                'name': id,
                'code': code,
                'precision': decimals,
                'info': currency,
                'active': True,
                'deposit': None,
                'withdraw': None,
                'networks': None,
                'fee': None,
                'type': 'crypto',
                'limits': {
                    'amount': {
                        'min': None,
                        'max': None,
                    },
                    'withdraw': {
                        'min': None,
                        'max': None,
                    },
                },
            })
        return result

    def fetch_markets(self, params={}) -> List[Market]:
        """
        retrieves data on all markets for elys
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: an array of objects representing market data
        """
        url = self.urls['api']['public'] + '/v1/markets'
        response = self.fetch(url, 'GET', None, None)
        #
        # {
        #     "amm_pools": [
        #         {
        #             "pool_assets": [
        #                 {
        #                     "token": {
        #                         "amount": "1000000",
        #                         "denom": "WBTC"
        #                     },
        #                     "weight": "50"
        #                 },
        #                 {
        #                     "token": {
        #                         "amount": "50000000000",
        #                         "denom": "USDC"
        #                     },
        #                     "weight": "50"
        #                 }
        #             ],
        #             "pool_id": 1,
        #             "pool_params": {
        #                 "fee_denom": "USDC",
        #                 "swap_fee": "0.003"
        #             }
        #         }
        #     ]
        # }
        #
        result = []
        ammPools = self.safe_list(response, 'amm_pools', [])
        for i in range(0, len(ammPools)):
            pool = ammPools[i]
            poolAssets = self.safe_list(pool, 'pool_assets', [])
            if len(poolAssets) >= 2:
                baseAsset = poolAssets[0]
                quoteAsset = poolAssets[1]
                baseToken = self.safe_dict(baseAsset, 'token', {})
                quoteToken = self.safe_dict(quoteAsset, 'token', {})
                baseId = self.safe_string(baseToken, 'denom')
                quoteId = self.safe_string(quoteToken, 'denom')
                base = self.safe_currency_code(baseId)
                quote = self.safe_currency_code(quoteId)
                poolId = self.safe_string(pool, 'pool_id')
                symbol = base + '/' + quote
                poolParams = self.safe_dict(pool, 'pool_params', {})
                swapFee = self.safe_string(poolParams, 'swap_fee')
                result.append(self.safe_market_structure({
                    'id': poolId,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'settle': None,
                    'baseId': baseId,
                    'quoteId': quoteId,
                    'settleId': None,
                    'type': 'swap',
                    'spot': False,
                    'margin': False,
                    'swap': True,
                    'future': False,
                    'option': False,
                    'active': True,
                    'contract': True,
                    'linear': True,
                    'inverse': False,
                    'taker': self.parse_number(swapFee),
                    'maker': self.parse_number(swapFee),
                    'contractSize': None,
                    'expiry': None,
                    'expiryDatetime': None,
                    'strike': None,
                    'optionType': None,
                    'precision': {
                        'amount': None,
                        'price': None,
                    },
                    'limits': {
                        'leverage': {
                            'min': None,
                            'max': None,
                        },
                        'amount': {
                            'min': None,
                            'max': None,
                        },
                        'price': {
                            'min': None,
                            'max': None,
                        },
                        'cost': {
                            'min': None,
                            'max': None,
                        },
                    },
                    'created': None,
                    'info': pool,
                }))
        return result

    def fetch_tickers(self, symbols: Strings = None, params={}) -> Tickers:
        """
        fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        :param str[]|None symbols: unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a dictionary of ticker structures
        """
        self.load_markets()
        request: dict = {}
        if symbols is not None:
            marketIds = []
            for i in range(0, len(symbols)):
                symbol = symbols[i]
                market = self.market(symbol)
                marketIds.append(market['base'] + '-' + market['quote'])
            request['symbols'] = marketIds
        url = self.urls['api']['public'] + '/v1/tickers'
        response = self.fetch(url, 'GET', None, None)
        #
        # [
        #     {
        #         "instrument": "WBTC-USDC",
        #         "period24h": {
        #             "change": 1250.5,
        #             "changePercentage": 2.5,
        #             "high": 52000.0,
        #             "low": 49500.0,
        #             "open": 50000.0,
        #             "volume": 1500000.0
        #         },
        #         "price": 51250.5,
        #         "priceUsd": "51250.5",
        #         "timestamp": 1640995200000
        #     }
        # ]
        #
        result: dict = {}
        for i in range(0, len(response)):
            ticker = self.parse_ticker(response[i])
            symbol = ticker['symbol']
            result[symbol] = ticker
        return self.filter_by_array_tickers(result, 'symbol', symbols)

    def parse_ticker(self, ticker, market: Market = None) -> Ticker:
        #
        # {
        #     "instrument": "WBTC-USDC",
        #     "period24h": {
        #         "change": 1250.5,
        #         "changePercentage": 2.5,
        #         "high": 52000.0,
        #         "low": 49500.0,
        #         "open": 50000.0,
        #         "volume": 1500000.0
        #     },
        #     "price": 51250.5,
        #     "priceUsd": "51250.5",
        #     "timestamp": 1640995200000
        # }
        #
        marketId = self.safe_string(ticker, 'instrument')
        symbol = self.safe_symbol(marketId, market, '-')
        timestamp = self.safe_integer(ticker, 'timestamp')
        period24h = self.safe_dict(ticker, 'period24h', {})
        last = self.safe_string(ticker, 'price')
        open = self.safe_string(period24h, 'open')
        high = self.safe_string(period24h, 'high')
        low = self.safe_string(period24h, 'low')
        change = self.safe_string(period24h, 'change')
        percentage = self.safe_string(period24h, 'changePercentage')
        baseVolume = self.safe_string(period24h, 'volume')
        return self.safe_ticker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': high,
            'low': low,
            'bid': None,
            'bidVolume': None,
            'ask': None,
            'askVolume': None,
            'vwap': None,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': change,
            'percentage': percentage,
            'average': None,
            'baseVolume': baseVolume,
            'quoteVolume': None,
            'info': ticker,
        }, market)

    def fetch_funding_rates(self, symbols: Strings = None, params={}) -> FundingRates:
        """
        fetch the funding rates for multiple markets
        :param str[]|None symbols: unified symbols of the markets to fetch the funding rates for, all market funding rates are returned if not assigned
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a dictionary of funding rates structures
        """
        self.load_markets()
        url = self.urls['api']['public'] + '/v1/funding-rates'
        response = self.fetch(url, 'GET', None, None)
        #
        # [
        #   {
        #     "symbol": "ATOM-USDC",
        #     "funding_rate": "-0.117462885648393966",
        #     "long_rate": "-0.189599831252923122",
        #     "short_rate": "0.117462885648393966",
        #     "timestamp": 1754361530209
        #   }
        # ]
        #
        result: dict = {}
        for i in range(0, len(response)):
            fundingRate = self.parse_funding_rate(response[i])
            symbol = fundingRate['symbol']
            result[symbol] = fundingRate
        return self.filter_by_array(result, 'symbol', symbols)

    def fetch_open_interest(self, symbol: str, params={}) -> OpenInterest:
        """
        fetch the open interest for a symbol
        :param str symbol: unified market symbol
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an open interest structure
        """
        self.load_markets()
        market = self.market(symbol)
        query: dict = {
            'symbol': market['base'] + '-' + market['quote'],
        }
        url = self.urls['api']['public'] + '/v1/open-interest?' + self.urlencode(query)
        response = self.fetch(url, 'GET', None, None)
        #
        # {
        #   "openInterest": "-341.19996",
        #   "symbol": "ATOM-USDC",
        #   "time": 1754427059775
        # }
        #
        return self.parse_open_interest(response, market)

    def parse_funding_rate(self, fundingRate, market: Market = None) -> FundingRate:
        #
        # {
        #   "symbol": "ATOM-USDC",
        #   "funding_rate": "-0.117462885648393966",
        #   "long_rate": "-0.189599831252923122",
        #   "short_rate": "0.117462885648393966",
        #   "timestamp": 1754361530209
        # }
        #
        marketId = self.safe_string(fundingRate, 'symbol')
        symbol = self.safe_symbol(marketId, market, '-')
        timestamp = self.safe_integer(fundingRate, 'timestamp')
        rate = self.safe_string(fundingRate, 'funding_rate')
        return {
            'info': fundingRate,
            'symbol': symbol,
            'markPrice': None,
            'indexPrice': None,
            'interestRate': None,
            'estimatedSettlePrice': None,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'fundingRate': self.parse_number(rate),
            'fundingTimestamp': timestamp,
            'fundingDatetime': self.iso8601(timestamp),
            'nextFundingRate': None,
            'nextFundingTimestamp': None,
            'nextFundingDatetime': None,
            'previousFundingRate': None,
            'previousFundingTimestamp': None,
            'previousFundingDatetime': None,
        }

    def parse_open_interest(self, openInterest, market: Market = None) -> OpenInterest:
        #
        # {
        #   "openInterest": "-341.19996",
        #   "symbol": "ATOM-USDC",
        #   "time": 1754427059775
        # }
        #
        marketId = self.safe_string(openInterest, 'symbol')
        symbol = self.safe_symbol(marketId, market, '-')
        openInterestAmount = self.safe_string(openInterest, 'openInterest')
        timestamp = self.safe_integer(openInterest, 'time')
        return {
            'symbol': symbol,
            'baseVolume': self.parse_number(openInterestAmount),
            'quoteVolume': None,
            'openInterestAmount': self.parse_number(openInterestAmount),
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'info': openInterest,
        }

    def fetch_ohlcv(self, symbol: str, timeframe='1m', since: Int = None, limit: Int = None, params={}) -> List[list]:
        """
        fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents, support '1m', '1h', '1d'
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int [params.until]: timestamp in ms of the latest candle to fetch
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        self.load_markets()
        market = self.market(symbol)
        until = self.safe_integer(params, 'until', self.milliseconds())
        fromTime = since
        if fromTime is None:
            if limit is not None:
                timeframeInMilliseconds = self.parse_timeframe(timeframe) * 1000
                fromTime = self.sum(until, timeframeInMilliseconds * limit * -1)
            else:
                fromTime = 0
        fromTime = int(math.floor(fromTime / 1000))  # convert to seconds
        toTime = int(math.floor(until / 1000))  # convert to seconds
        params = self.omit(params, ['until'])
        path = 'ohlcv/' + market['baseId'] + '/' + str(fromTime) + '/' + str(toTime) + '/' + self.safe_string(self.timeframes, timeframe, timeframe)
        url = self.urls['api']['public'] + '/' + path
        response = self.fetch(url, 'GET', None, None)
        #
        # [
        #     {
        #         "close": 51000.0,
        #         "high": 51500.0,
        #         "low": 50500.0,
        #         "open": 50800.0,
        #         "timestamp": 1640995200
        #     }
        # ]
        #
        return self.parse_ohlcvs(response, market, timeframe, since, limit)

    def parse_ohlcv(self, ohlcv, market: Market = None) -> list:
        #
        # {
        #     "close": 51000.0,
        #     "high": 51500.0,
        #     "low": 50500.0,
        #     "open": 50800.0,
        #     "timestamp": 1640995200
        # }
        #
        return [
            self.safe_timestamp(ohlcv, 'timestamp'),
            self.safe_number(ohlcv, 'open'),
            self.safe_number(ohlcv, 'high'),
            self.safe_number(ohlcv, 'low'),
            self.safe_number(ohlcv, 'close'),
            None,  # volume not provided in response
        ]

    def fetch_balance(self, params={}) -> Balances:
        """
        query for balance and get the amount of funds available for trading or funds locked in orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str params['address']: the wallet address to fetch balance for
        :returns dict: a balance structure
        """
        address = self.safe_string(params, 'address')
        if address is None:
            raise ArgumentsRequired(self.id + ' fetchBalance() requires an address parameter')
        params = self.omit(params, ['address'])
        path = 'v1/balance/' + address
        url = self.urls['api']['public'] + '/' + path
        response = self.fetch(url, 'GET', None, None)
        #
        # {
        #     "leverage_lp_positions": [...],
        #     "liquid_assets": [
        #         {
        #             "amount": "1000000000",
        #             "denom": "USDC"
        #         },
        #         {
        #             "amount": "50000000",
        #             "denom": "WBTC"
        #         }
        #     ],
        #     "liquidity_positions": [...],
        #     "perpetual_positions": [...]
        # }
        #
        result: dict = {
            'info': response,
            'timestamp': None,
            'datetime': None,
        }
        liquidAssets = self.safe_list(response, 'liquid_assets', [])
        for i in range(0, len(liquidAssets)):
            balance = liquidAssets[i]
            currencyId = self.safe_string(balance, 'denom')
            code = self.safe_currency_code(currencyId)
            amount = self.safe_string(balance, 'amount')
            account = self.account()
            account['free'] = amount
            account['total'] = amount
            result[code] = account
        return self.safe_balance(result)

    def fetch_my_trades(self, symbol: str = None, since: Int = None, limit: Int = None, params={}) -> List[Trade]:
        """
        fetch all trades made by the user
        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch trades for
        :param int [limit]: the maximum number of trades structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str params['address']: the wallet address to fetch trades for
        :param int [params.from]: pagination offset, defaults to 0
        :returns Trade[]: a list of trade structures
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchMyTrades() requires a symbol parameter')
        self.load_markets()
        market = self.market(symbol)
        address = self.safe_string(params, 'address')
        if address is None:
            raise ArgumentsRequired(self.id + ' fetchMyTrades() requires an address parameter')
        fromParam = self.safe_string(params, 'from', '0')
        size = self.safe_string(params, 'size', str(limit) if limit else '100')
        params = self.omit(params, ['address', 'from', 'size'])
        # Convert symbol to API format(base-quote)
        symbolId = market['base'] + '-' + market['quote']
        path = 'trades/' + address + '/' + symbolId + '/' + size + '/' + fromParam
        url = self.urls['api']['public'] + '/' + path
        response = self.fetch(url, 'GET', None, None)
        #
        # {
        #     "perpetual_position": [
        #         {
        #             "all_interests_paid": "string",
        #             "amm_pool_id": "string",
        #             "borrow_interest_paid_custody": "string",
        #             "closing_amount": "string",
        #             "closing_price": "string",
        #             "closing_ratio": "string",
        #             "collateral": "string",
        #             "collateral_amount": "string",
        #             "collateral_asset": "string",
        #             "created_at": "2019-08-24T14:15:22Z",
        #             "custody": "string",
        #             "custody_asset": "string",
        #             # ... more fields
        #             "txhash": "string",
        #             "type": "string"
        #         }
        #     ],
        #     "spot_orders": [
        #         {
        #             "amount": {
        #                 "amount": "string",
        #                 "denom": "string"
        #             },
        #             "created_at": "2019-08-24T14:15:22Z",
        #             "order_amount": {
        #                 "amount": "string",
        #                 "denom": "string"
        #             },
        #             "order_id": "string",
        #             "order_price": "string",
        #             "order_type": "string",
        #             "owner_address": "string",
        #             "spot_price": "string",
        #             "txhash": "string",
        #             "type": "string"
        #         }
        #     ]
        # }
        #
        result = []
        # Process perpetual position trades
        perpetualPositions = self.safe_list(response, 'perpetual_position', [])
        for i in range(0, len(perpetualPositions)):
            trade = self.parse_my_trade(perpetualPositions[i], market)
            result.append(trade)
        # Process spot order trades
        spotOrders = self.safe_list(response, 'spot_orders', [])
        for i in range(0, len(spotOrders)):
            trade = self.parse_my_trade(spotOrders[i], market)
            result.append(trade)
        return self.filter_by_since_limit(result, since, limit, 'timestamp')

    def fetch_trades(self, symbol: str = None, since: Int = None, limit: Int = None, params={}) -> List[Trade]:
        """
        fetch historical trades for a symbol
        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch trades for
        :param int [limit]: the maximum number of trades to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str params['address']: the wallet address to fetch trades for(required)
        :param int [params.from]: pagination offset, defaults to 0
        :returns Trade[]: a list of trade structures
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchTrades() requires a symbol parameter')
        self.load_markets()
        market = self.market(symbol)
        address = self.safe_string(params, 'address')
        if address is None:
            raise ArgumentsRequired(self.id + ' fetchTrades() requires an address parameter')
        fromParam = self.safe_string(params, 'from', '0')
        size = self.safe_string(params, 'size', str(limit) if limit else '100')
        params = self.omit(params, ['address', 'from', 'size'])
        # Convert symbol to API format(base-quote)
        symbolId = market['base'] + '-' + market['quote']
        path = 'trades/' + address + '/' + symbolId + '/' + size + '/' + fromParam
        url = self.urls['api']['public'] + '/' + path
        response = self.fetch(url, 'GET', None, None)
        #
        # {
        #     "perpetual_position": [
        #         {
        #             "type": "perpetual_mtp_open",
        #             "mtp_id": "64",
        #             "owner": "elys1u8c28343vvhwgwhf29w6hlcz73hvq7lwxmrl46",
        #             "position": "SHORT",
        #             "amm_pool_id": "1",
        #             "collateral_asset": "USDC",
        #             "collateral": "19.754485",
        #             "open_price": "4.345121747801747801",
        #             "created_at": "2025-07-30T21:44:56.048Z",
        #             "txhash": "68582DF04AE7F04302F66D937B18E2B7B181664A7C01247689473DA746DBC153"
        #         }
        #     ],
        #     "spot_orders": [
        #         {
        #             "type": "tradeshield_execute_market_buy_spot_order",
        #             "order_type": "MARKETBUY",
        #             "order_id": "0",
        #             "order_price": "5.354117447312775000",
        #             "order_amount": {
        #                 "denom": "ATOM",
        #                 "amount": "1"
        #             },
        #             "owner_address": "elys1u8c28343vvhwgwhf29w6hlcz73hvq7lwxmrl46",
        #             "created_at": "2025-05-12T12:40:38.309Z",
        #             "txhash": "7C8555767E7D8D492B62E132108EC4CE26DAC8D78F008611A5AE3C1FD3D2DCD5"
        #         }
        #     ]
        # }
        #
        result = []
        # Process perpetual position trades
        perpetualPositions = self.safe_list(response, 'perpetual_position', [])
        for i in range(0, len(perpetualPositions)):
            trade = self.parse_my_trade(perpetualPositions[i], market)
            result.append(trade)
        # Process spot order trades
        spotOrders = self.safe_list(response, 'spot_orders', [])
        for i in range(0, len(spotOrders)):
            trade = self.parse_my_trade(spotOrders[i], market)
            result.append(trade)
        return self.filter_by_since_limit(result, since, limit, 'timestamp')

    def fetch_open_orders(self, symbol: str = None, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        """
        fetch open orders for a symbol
        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of orders to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.address]: the wallet address to fetch orders for
        :returns Order[]: a list of order structures
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOpenOrders() requires a symbol parameter')
        self.load_markets()
        market = self.market(symbol)
        address = self.safe_string(params, 'address')
        query: dict = {
            'symbol': market['base'] + '-' + market['quote'],
        }
        if address is not None:
            query['address'] = address
        params = self.omit(params, ['address'])
        url = self.urls['api']['public'] + '/v1/orders/open?' + self.urlencode(query)
        response = self.fetch(url, 'GET', None, None)
        #
        # {
        #   "pending_spot_orders": null,
        #   "pending_perpetual_orders": [
        #     {
        #       "order_id": "24",
        #       "owner_address": "elys1wstfr2fx8h9tdxhs4wv4t8sjxdgrw6f9dpdpdf",
        #       "position": "LONG",
        #       "trigger_price": "0.000000000000000000",
        #       "collateral_denom": "USDC",
        #       "collateral_value": "4240.469631",
        #       "leverage": "3.000000000000000000",
        #       "take_profit_price": "0.000000000000000000",
        #       "stop_loss_price": "0.000000000000000000",
        #       "pool_id": "6",
        #       "liquidation_price": "2513.381153809520746186",
        #       "funding_rate": "0.000000000000000000",
        #       "borrow_interest_rate": "0.000000000000000000",
        #       "position_size_denom": "ETH",
        #       "position_size_value": "3.457635083"
        #     }
        #   ]
        # }
        #
        result = []
        # Process pending spot orders
        spotOrders = self.safe_list(response, 'pending_spot_orders', [])
        for i in range(0, len(spotOrders)):
            order = self.parse_order(spotOrders[i], market)
            result.append(order)
        # Process pending perpetual orders
        perpetualOrders = self.safe_list(response, 'pending_perpetual_orders', [])
        for i in range(0, len(perpetualOrders)):
            order = self.parse_order(perpetualOrders[i], market)
            result.append(order)
        return self.filter_by_since_limit(result, since, limit, 'timestamp')

    def fetch_order(self, id: str, symbol: str = None, params={}) -> Order:
        """
        fetch a specific order by id
        :param str id: order id
        :param str symbol: unified market symbol
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str params['address']: the wallet address that owns the order(required)
        :returns dict: an order structure
        """
        if id is None:
            raise ArgumentsRequired(self.id + ' fetchOrder() requires an id parameter')
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOrder() requires a symbol parameter')
        self.load_markets()
        market = self.market(symbol)
        address = self.safe_string(params, 'address')
        if address is None:
            raise ArgumentsRequired(self.id + ' fetchOrder() requires an address parameter')
        query: dict = {
            'id': id,
            'symbol': market['base'] + '-' + market['quote'],
            'address': address,
        }
        params = self.omit(params, ['address'])
        url = self.urls['api']['public'] + '/v1/order?' + self.urlencode(query)
        response = self.fetch(url, 'GET', None, None)
        #
        # {
        #   "collateral_asset": "USDC",
        #   "trading_asset": "WBTC",
        #   "liability_asset": "USDC",
        #   "custody_asset": "WBTC",
        #   "collateral": "21.552225",
        #   "liability": "21.571616",
        #   "borrow_interest_paid_custody": "0",
        #   "borrow_interest_unpaid_liability": "19391",
        #   "custody": "38062",
        #   "health": "2.006222443084368180",
        #   "position": "LONG",
        #   "amm_pool_id": 5,
        #   "take_profit_price": "0.000000000000000000",
        #   "take_profit_borrow_factor": "1.000000000000000000",
        #   "funding_fee_paid_custody": "81",
        #   "funding_fee_received_custody": "181",
        #   "open_price": "113500.890943575154101469",
        #   "stop_loss_price": "58169.206608582266477003",
        #   "trading_asset_price": "113668.427604308776796146",
        #   "pnl": {
        #     "denom": "USDC",
        #     "amount": "0.153619"
        #   },
        #   "effective_leverage": "1.992036442801146611",
        #   "liquidation_price": "58022.183058726551416110",
        #   "fees": {
        #     "total_fees_base_currency": "92099",
        #     "borrow_interest_fees_liability_asset": "0",
        #     "borrow_interest_fees_base_currency": "0",
        #     "funding_fees_liquidity_asset": "81",
        #     "funding_fees_base_currency": "92099"
        #   },
        #   "id": 125
        # }
        #
        # This is actually a perpetual position, not a traditional order
        # We'll parse it order structure
        position = self.safe_string(response, 'position')  # 'LONG' or 'SHORT'
        side = position.lower() if position else None
        collateral = self.safe_string(response, 'collateral')
        openPrice = self.safe_string(response, 'open_price')
        orderId = self.safe_string(response, 'id')
        stopLossPrice = self.safe_string(response, 'stop_loss_price')
        takeProfitPrice = self.safe_string(response, 'take_profit_price')
        cost = self.number_to_string(self.parse_number(collateral) * self.parse_number(openPrice)) if (collateral and openPrice) else None
        return self.safe_order({
            'id': orderId,
            'clientOrderId': None,
            'info': response,
            'timestamp': None,
            'datetime': None,
            'lastTradeTimestamp': None,
            'symbol': symbol,
            'type': 'market',  # perpetual positions are typically market orders
            'timeInForce': None,
            'postOnly': None,
            'side': side,
            'amount': collateral,  # using collateral
            'price': openPrice,
            'stopPrice': stopLossPrice,
            'triggerPrice': None,
            'takeProfitPrice': takeProfitPrice,
            'cost': cost,
            'average': openPrice,
            'filled': collateral,  # assuming position is fully filled
            'remaining': '0',  # perpetual positions are fully filled
            'status': 'closed',  # self is an active position, but in order terms it's "filled"
            'fee': None,
            'trades': None,
        }, market)

    def fetch_orders(self, symbol: str = None, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        """
        fetch all orders(perpetual positions) for a symbol
        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of orders to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.address]: optional address to filter orders
        :returns Order[]: a list of order structures
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOrders() requires a symbol parameter')
        self.load_markets()
        market = self.market(symbol)
        address = self.safe_string(params, 'address')
        query: dict = {
            'symbol': market['base'] + '-' + market['quote'],
        }
        if address is not None:
            query['address'] = address
        params = self.omit(params, ['address'])
        url = self.urls['api']['public'] + '/v1/orders?' + self.urlencode(query)
        response = self.fetch(url, 'GET', None, None)
        #
        # [
        #   {
        #     "collateral_asset": "USDC",
        #     "trading_asset": "WBTC",
        #     "liability_asset": "USDC",
        #     "custody_asset": "WBTC",
        #     "collateral": "0.028661",
        #     "liability": "0.058045",
        #     "borrow_interest_paid_custody": "2486",
        #     "borrow_interest_unpaid_liability": "721",
        #     "custody": "42062",
        #     "health": "823.960724878386525358",
        #     "position": "LONG",
        #     "amm_pool_id": 5,
        #     "take_profit_price": "0.000000000000000000",
        #     "take_profit_borrow_factor": "1.000000000000000000",
        #     "funding_fee_paid_custody": "1767",
        #     "funding_fee_received_custody": "41984",
        #     "open_price": "107780.910665021660979213",
        #     "stop_loss_price": "74350.528603299143254436",
        #     "trading_asset_price": "113671.371393379478105303",
        #     "pnl": {
        #       "denom": "USDC",
        #       "amount": "47.740094"
        #     },
        #     "effective_leverage": "1.001200013156294978",
        #     "liquidation_price": "139.649738172221958061",
        #     "fees": {
        #       "total_fees_base_currency": "4835894",
        #       "borrow_interest_fees_liability_asset": "2486",
        #       "borrow_interest_fees_base_currency": "2826718",
        #       "funding_fees_liquidity_asset": "1767",
        #       "funding_fees_base_currency": "2009175"
        #     },
        #     "id": 2
        #   }
        # ]
        #
        result = []
        for i in range(0, len(response)):
            position = response[i]
            # Parse each perpetual position order
            positionSide = self.safe_string(position, 'position')  # 'LONG' or 'SHORT'
            side = positionSide.lower() if positionSide else None
            collateral = self.safe_string(position, 'collateral')
            openPrice = self.safe_string(position, 'open_price')
            orderId = self.safe_string(position, 'id')
            stopLossPrice = self.safe_string(position, 'stop_loss_price')
            takeProfitPrice = self.safe_string(position, 'take_profit_price')
            cost = self.number_to_string(self.parse_number(collateral) * self.parse_number(openPrice)) if (collateral and openPrice) else None
            order = self.safe_order({
                'id': orderId,
                'clientOrderId': None,
                'info': position,
                'timestamp': None,
                'datetime': None,
                'lastTradeTimestamp': None,
                'symbol': symbol,
                'type': 'market',  # perpetual positions are typically market orders
                'timeInForce': None,
                'postOnly': None,
                'side': side,
                'amount': collateral,  # using collateral
                'price': openPrice,
                'stopPrice': stopLossPrice,
                'triggerPrice': None,
                'takeProfitPrice': takeProfitPrice,
                'cost': cost,
                'average': openPrice,
                'filled': collateral,  # assuming position is fully filled
                'remaining': '0',  # perpetual positions are fully filled
                'status': 'closed',  # self is an active position, but in order terms it's "filled"
                'fee': None,
                'trades': None,
            }, market)
            result.append(order)
        return self.filter_by_since_limit(result, since, limit, 'timestamp')

    def parse_my_trade(self, trade, market: Market = None) -> Trade:
        #
        # Perpetual position trade:
        # {
        #     "all_interests_paid": "string",
        #     "amm_pool_id": "string",
        #     "closing_amount": "string",
        #     "closing_price": "string",
        #     "collateral_amount": "string",
        #     "created_at": "2019-08-24T14:15:22Z",
        #     "open_price": "string",
        #     "owner": "string",
        #     "position": "string",
        #     "txhash": "string",
        #     "type": "string"
        # }
        #
        # Spot order trade:
        # {
        #     "amount": {
        #         "amount": "string",
        #         "denom": "string"
        #     },
        #     "created_at": "2019-08-24T14:15:22Z",
        #     "order_amount": {
        #         "amount": "string",
        #         "denom": "string"
        #     },
        #     "order_id": "string",
        #     "order_price": "string",
        #     "order_type": "string",
        #     "owner_address": "string",
        #     "spot_price": "string",
        #     "txhash": "string",
        #     "type": "string"
        # }
        #
        id = self.safe_string_2(trade, 'txhash', 'order_id')
        timestamp = self.parse8601(self.safe_string(trade, 'created_at'))
        symbol = market['symbol'] if market else None
        # Determine if it's a perpetual or spot trade
        isPerpetual = ('amm_pool_id' in trade)
        amount: str
        price: str
        side: str
        type: str
        if isPerpetual:
            # Perpetual position trade(can be open or closed)
            amount = self.safe_string(trade, 'collateral')  # Use collateral position size
            price = self.safe_string(trade, 'open_price')  # Use open_price for perpetual positions
            side = self.safe_string(trade, 'position')  # 'long' or 'short'
            type = 'market'  # perpetual positions are typically market orders
        else:
            # Spot order trade
            orderAmount = self.safe_dict(trade, 'order_amount', {})
            amount = self.safe_string(orderAmount, 'amount')
            price = self.safe_string_2(trade, 'order_price', 'spot_price')
            orderType = self.safe_string(trade, 'order_type')
            side = 'buy' if (orderType == 'buy') else 'sell'
            type = 'market'  # assuming market orders for now
        cost = self.number_to_string(self.parse_number(amount) * self.parse_number(price)) if (amount and price) else None
        return self.safe_trade({
            'id': id,
            'order': self.safe_string(trade, 'order_id'),
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'type': type,
            'side': side,
            'amount': amount,
            'price': price,
            'cost': cost,
            'fee': None,  # fee information not directly available
            'takerOrMaker': None,
        }, market)

    def parse_order(self, order, market: Market = None) -> Order:
        #
        # Perpetual Order:
        # {
        #   "order_id": "24",
        #   "owner_address": "elys1wstfr2fx8h9tdxhs4wv4t8sjxdgrw6f9dpdpdf",
        #   "position": "LONG",
        #   "trigger_price": "0.000000000000000000",
        #   "collateral_denom": "USDC",
        #   "collateral_value": "4240.469631",
        #   "leverage": "3.000000000000000000",
        #   "take_profit_price": "0.000000000000000000",
        #   "stop_loss_price": "0.000000000000000000",
        #   "pool_id": "6",
        #   "liquidation_price": "2513.381153809520746186",
        #   "funding_rate": "0.000000000000000000",
        #   "borrow_interest_rate": "0.000000000000000000",
        #   "position_size_denom": "ETH",
        #   "position_size_value": "3.457635083"
        # }
        #
        # Spot Order:
        # {
        #   "order_amount": "string",
        #   "order_denom": "string",
        #   "order_id": 0,
        #   "order_price": null,
        #   "order_target_denom": "string",
        #   "order_type": "string",
        #   "owner_address": "string",
        #   "status": "string"
        # }
        #
        id = self.safe_string(order, 'order_id')
        symbol = market['symbol'] if market else None
        # Check if it's a perpetual order(has position field) or spot order(has order_type field)
        isPerpetual = ('position' in order)
        side: str
        amount: str
        price: str
        type: str
        status: str
        if isPerpetual:
            # Perpetual order
            position = self.safe_string(order, 'position')  # 'LONG' or 'SHORT'
            side = position.lower() if position else None
            amount = self.safe_string(order, 'position_size_value')
            triggerPrice = self.safe_string(order, 'trigger_price')
            price = triggerPrice if (triggerPrice and triggerPrice != '0.000000000000000000') else None
            type = 'limit' if price else 'market'
            status = 'open'  # perpetual orders are pending/open
        else:
            # Spot order
            orderType = self.safe_string(order, 'order_type')
            side = 'buy' if (orderType == 'MARKETBUY' or orderType == 'LIMITBUY') else 'sell'
            amount = self.safe_string(order, 'order_amount')
            price = self.safe_string(order, 'order_price')
            if orderType and orderType.find('MARKET') >= 0:
                type = 'market'
            else:
                type = 'limit'
            status = self.safe_string(order, 'status', 'open')
        cost = self.number_to_string(self.parse_number(amount) * self.parse_number(price)) if (amount and price) else None
        return self.safe_order({
            'id': id,
            'clientOrderId': None,
            'info': order,
            'timestamp': None,
            'datetime': None,
            'lastTradeTimestamp': None,
            'symbol': symbol,
            'type': type,
            'timeInForce': None,
            'postOnly': None,
            'side': side,
            'amount': amount,
            'price': price,
            'stopPrice': self.safe_string(order, 'stop_loss_price') if isPerpetual else None,
            'triggerPrice': self.safe_string(order, 'trigger_price') if isPerpetual else None,
            'takeProfitPrice': self.safe_string(order, 'take_profit_price') if isPerpetual else None,
            'cost': cost,
            'average': None,
            'filled': None,
            'remaining': amount,
            'status': status,
            'fee': None,
            'trades': None,
        }, market)
